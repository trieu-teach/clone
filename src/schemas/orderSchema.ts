import { z } from 'zod';
import { extendZod, zId } from "@zodyac/zod-mongoose";
import { AddressSchema } from './customerSchema';

// Extend zod with the zId and zUUID functions (!!important)
extendZod(z);

export const RefundSchema = z.object({
    refund_date: z.date().default(new Date()),
    refund_reason: z.string().min(1),
    refund_status: z.enum([
        "pending",
        "processing",
        "completed",
        "cancelled"
    ])
})

// Define the schema (!!important)
export const OrderSchema = z.object({
    customer_id: zId("Customer"),
    order_date: z.date().default(new Date()),
    total_amount: z.number().min(0),//sum of all amount in cart
    promotion_id: z.optional(zId("Promotion")),
    discounted_amount: z.number().min(0),
    delivery_amount: z.number().min(0).default(0), // Added delivery amount
    tax_amount: z.number().min(0).default(0), // Added tax amount
    final_amount: z.number().min(0),
    shippingAddress: AddressSchema,
    status: z.enum([
        "pending",//order is waiting for processing
        "delivering", //order is being delivered
        "completed", //order is completed
        "cancelled" //order is cancelled
    ]),
    payment_method: z.enum(["cash_on_delivery", "momo","zalopay"]),
    //default value will be generated by mongoose
    createdAt: z.date().default(new Date()),
    updatedAt: z.date().default(new Date()),
});


// Define the schema with the ID (!!important)
export const zOrderSchemaUdate = OrderSchema.extend({
    _id: zId(), //default value will be generated by mongoose
    refund: z.optional(RefundSchema),
})

export type Order = z.infer<typeof zOrderSchemaUdate>;
// Define a separate schema for new orders (without _id)\

